/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

vertices
(
   (0     0                    -100)   // 0

   (3.6  -0.15717942211764708  -100)   // 1
   (3.6   0.15717942211764708  -100)   // 2

   (0     0                     0)     // 3

   (3.6  -0.15717942211764708   0)     // 4
   (3.6   0.15717942211764708   0)     // 5

   (120  -5.239314071     0)     // 6
   (120   5.239314071     0)     // 7

   (0     0                     640)   // 8

   (3.6  -0.15717942211764708   640)   // 9
   (3.6   0.15717942211764708   640)   // 10

   (120  -5.239314071     640)   // 11
   (120   5.239314071     640)   // 12
);

blocks
(
    hex ( 0  1  2  0  3  4  5  3)   (5  1 20)   simpleGrading (1 1 1)
    hex ( 3  4  5  3  8  9 10  8)   (5  1 70)   simpleGrading (1 1 2)
    hex ( 4  6  7  5  9 11 12 10)   (60 1 70)   simpleGrading (3 1 2)
);

boundary
(
    inletCH4
    {
        type patch;
        faces
        (
            (1 0 0 2)
        );
    }

    wallOutside
    {
        type wall;
        faces
        (
            (6 7 11 12)
        );
    }

    wallTube
    {
        type wall;
        faces
        (
            (1 2 4 5)
        );
    }

    inletAir
    {
        type patch;
        faces
        (
            (4 5 6 7)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (8  9 10  8)
            (9 10 11 12)
        );
    }

    axis
    {
        type empty;
        faces
        (
            (0 3 3 0)
            (3 8 8 3)
        );
    }

    frontAndBack_pos
    {
        type wedge;
        faces
        (
            (2 0 3 5)

            (3 5 10 8)
            (5 7 12 10)
        );
    }

    frontAndBack_neg
    {
        type wedge;
        faces
        (
            (0 1 4 3)

            (3 4 9 8)
            (4 6 11 9)
        );
    }
);

// ************************************************************************* //
